package main

import "fmt"

// 数据类型
/*
两类数据类型
1. 基础数据类型：数字、字符串、bool
2. 复杂类型：数组、切片、映射、结构体
*/

//  整数类型
/*
1. 有哪些整数类型
2， 整数溢出
3. 位操作
4. 进制转换（八进制、16进制，10进制）

*/

// 整数
/*
有符号：int8（占用一个字节）、int16(2字节)、int32（4字节）、int64（8字节）
无符号：uint8、uint16、uint32、uint64
int和uint ：至少会占用32位-64位之间、即4字节-8字节之间（尺寸由 CPU 的位数决定的32位：32位；64位对应64位）
8个二进制位(Bit=比特)构成1个字节（B）
*/

// 指针
/*
uintptr专门用来保存指针，

*/

func main() {
	// 溢出
	//uint8  0000 0000(0) ---- 1111 1111(255)
	//int8  -1000 0000(-128) ---- 0111 1111(127)
	var x uint8 = 255
	fmt.Println(x, x+1, x*x) // 后面2个会溢出

	/*
		运算符：
		1. 基本四则运算符加+减-乘*除/,取余%、等于==，小于< 大于> 小于等于<=、大于等于>=
		2. 位操作：按位与&、按位或|、按位取反^（1元，只有一个操作数【^i】取反；二元：异或，按照位比较，位数相同为0，不同为1【m^n】）、
			位清空操作符&^、左移1位相当于乘2<< 、右移1位相当于除以2>>
	*/
	fmt.Println(2 / 3.00000)
	fmt.Println(2 > 1)

	//位操作举例
	x1 := 4 // 0000 0100
	// 1111 1011   第一位为符号位，所以需要进行补码运算
	// 1000 0100 + 0000 0001  补码计算
	// 1000 0101  = -5
	fmt.Println(^x1)

	// 异或操作
	fmt.Println(4 ^ 5)
	// 0000 0100     0000 0101   按照位比较，位数相同为0，不同为1
	// 0000 0001 = 1

	// 位清空x&^y
	fmt.Println(4 &^ 11) // 如果y 的某个位是0，则取 x 对应的位
	// 如果y 的某个位是1，则取0
	// 0000 0100    0000 1011
	// 0000 0100

	// 位移
	fmt.Println(2 >> 1)
	fmt.Println(2 >> 2)
	fmt.Println(3 << 2)

	// 格式转换
	var ok1 int32 = 1
	var ok2 int16 = 2
	var ok int = int(ok1) + int(ok2) // 位数不一样需要转换
	fmt.Println(ok)

	// 进制类型转换
	oo := 0666 // 8进制使用0开始
	fmt.Println(oo)
	fmt.Printf("10进制:%d，8进制:%[1]o, 16进制:%[1]x, 0x的16进制:%#[1]x\n", oo)

}
